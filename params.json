{
  "name": "f5stego.js",
  "tagline": "JPEG steganography for browser and node. F5 algo in pure javascript.",
  "body": "f5stego.js\r\n==========\r\n\r\nPort of [f5 steganographic algorithm](https://code.google.com/p/f5-steganography/) to JavaScript for modern browsers and Node.js.\r\n\r\nDocumentation\r\n=============\r\n\r\n* [Overview](#overview)\r\n  * [Security considerations](#security-considerations)\r\n* [Installation](#installation)\r\n* [Usage](#usage)\r\n  * [Advanced usage](#advanced-usage)\r\n  * [Metadata manipulation](#metadata-manipulation)\r\n  * [CLI tool](#cli-tool)\r\n* [Contributors](#contributors)\r\n* [License](#license)\r\n\r\nOverview\r\n--------\r\n\r\nThis library implements jpeg codec capable of reading Huffman-coded baseline and progressive jpeg files and writing Huffman-coded baseline files. Decompression is done only up to raw DCT coefficients. They are not dequantized or dezigzagged. This coefficients are then used for embedding hidden messages with f5 algorithm.\r\n\r\nI decided to make this library because for my projects I need small (this lib is 15kb minified and 5.5kb if gzipped) and fast code what is easy to maintain (and review). Speed mostly considered for extraction process as often I need to process many images at once.\r\n\r\nPreviously I was using [Eph5](https://github.com/Kleshni/Eph5) library. But now it looks unmaintained and I'm too lazy to get into that Emscripten things. And also Eph5 is 370kb and this Emscripten magic is not actually that performant. f5stego.js while being small has at least same performance as Eph5 and in some cases is 2x faster.\r\n\r\nAnother interest was to make tiny extract only version. You can find it in [extra](extra/) folder. Minified version of that extractor is only 4.5kb (2kb if gzipped).\r\n\r\nNote: this implimentation is not compatible with [original code](https://code.google.com/p/f5-steganography/). It uses different shuffle algorithm and stores meatadata (used coding, data size) in a different way.\r\n\r\n### Security considerations\r\n\r\nFirst: this lib **does not encrypt** data it hides. If you need good security then encrypt your data with some strong algorithms before embedding. If you want my advice then take a look at [TweetNaCl-js](https://github.com/dchest/tweetnacl-js).\r\n\r\nYes, you need to provide key for data extraction. And if key is not correct, garbage will be extracted. This looks like encryption but actually this is just a side effect. This key is used for coefficients shuffling and data masking - all this is for making f5 less detectable, not encrypted.\r\n\r\nSecond: f5 **can be detected**. For example with [stegdetect](https://github.com/abeluck/stegdetect). Yep, this is not 100% guaranteed especially if you embed small messages into big images. But it is better to think what you hide your data from humans, not machines.\r\n\r\nInstallation\r\n------------\r\n\r\n```\r\nnpm install f5stegojs\r\n```\r\n\r\nThis package also provides simple cli tool which can be installed with\r\n\r\n```\r\nnpm install f5stegojs --global\r\n```\r\n\r\nf5stego.js uses [typed arrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays) so it will not work in environments where typed arrays are not present.\r\n\r\n\r\nUsage\r\n-----\r\nIn browser include minifed version\r\n\r\n```html\r\n<script type=\"text/javascript\" src=\"f5stego.min.js\"></script>\r\n```\r\n\r\nIn Node use `require` to load module\r\n\r\n```js\r\nvar f5stego = require('f5stegojs');\r\n```\r\n\r\nSimple usage will be like\r\n\r\n```js\r\nvar stegKey = [1,2,3,4,5,6,7,8,9];\r\n\r\nvar stegger = new f5stego(stegKey); // init stegger with key\r\n\r\n//embed message into image\r\nvar secretImage = stegger.embed(imageArray, dataArray);\r\n\r\n//extract message from image\r\nvar message = stegger.extract(secretImage);\r\n```\r\n\r\nHere `stegKey` is an array of byte values which is used for initialization of f5 shuffle. `imageArray` and `dataArray` are `Uint8Array` instances with cover jpeg image and message to embed respectively.\r\n\r\nf5stegojs waits for `Uint8Array` in its input and also returns `Uint8Array`. But in recent versions of Node `Buffer` is also instance of `Uint8Array` so buffers can be used as inputs but lib still return `Uint8Array`.\r\n\r\nAlso note that f5stegojs throws in case of errors, so use try-catch.\r\n\r\n### Advanced usage\r\n\r\nf5stego has also several utility methods and expose a several functions what allow you to control a bit how data is embedded into image.\r\n\r\n#### f5stego.prototype.analyze()\r\n\r\nPerform analyze of parsed jpeg for capacity. Returns object what looks like\r\n\r\n```js\r\n{\r\n  \"capacity\": [0,\r\n    18477,\r\n    13371,\r\n    9092,\r\n    5856,\r\n    3609,\r\n    2152,\r\n    1251,\r\n    713,\r\n    399,\r\n    220,\r\n    120,\r\n    63,\r\n    33,\r\n    16,\r\n    6,\r\n    3\r\n  ],\r\n  \"coeff_total\": 460800,\r\n  \"coeff_large\": 114241,\r\n  \"coeff_zero\": 270810,\r\n  \"coeff_one\": 68549,\r\n  \"coeff_one_ratio\": 0.37501504458668417\r\n}\r\n```\r\n\r\nMost interesting here is `capacity` array. It contains maximum capacity (in bytes) for different f5 coding modes. This library supports f5 matrix encodings from 1 to 16. AS arrays are indexed from zero first element is not used.\r\n\r\n#### f5stego.prototype.parse(jpeg)\r\n\r\nParses jpeg file. Jpeg is decompressed up to DCT coefficients and now ready for embedding/extracting f5 data.\r\n\r\n#### f5stego.prototype.f5put(data)\r\n\r\nEmbeds `data` into image using most appropriate coding. Returns object with resulting statistics what looks like\r\n\r\n```js\r\n{\r\n  \"k\": 4,\r\n  \"embedded\": 5024,\r\n  \"examined\": 155976,\r\n  \"changed\": 14070,\r\n  \"thrown\": 5267,\r\n  \"efficiency\": \"2.86\",\r\n  \"stats\": { ... } // same object what was returned by analyze()\r\n}\r\n```\r\nHere `k` shows what coding was used by f5 algorithm. `changed` shows how many DCT coefficients was changed and `thrown` shows how many of them was thrown (turned to zero). `efficiency` is how many bits of message was written by change of one DCT coefficient.\r\n\r\nValue of `embedded` will be bigger than original message because it also counts additional bits what is embedded into image by this library (`k` value, data size. From 20 to 28 bits).\r\n\r\n#### f5stego.prototype.f5put(data, k)\r\n\r\nIf you pass second argument to `f5put` then its value will be used as `k` in f5 algorithm. Returning object in this case will be like\r\n\r\n```js\r\n{\r\n  \"k\": 2,\r\n  \"embedded\": 5023.75,\r\n  \"examined\": 67931,\r\n  \"changed\": 20269,\r\n  \"thrown\": 7648,\r\n  \"efficiency\": \"1.98\"\r\n}\r\n```\r\n\r\nHere `k` to value you provided in `f5put` call. There is no `stats` property because image was not analyzed for finding best value of `k`.\r\n\r\n#### f5stego.prototype.f5get()\r\n\r\nExtracts hidden data from previously parsed jpeg and returns it as `Uint8Arrat`. Zero length array can be returned or array containing garbage (if image has no embedded message, or if wrong `stegoKey` was used).\r\n\r\n#### f5stego.prototype.pack()\r\n\r\nCompresses jpeg back and return resulting file as `Uint8Array`.\r\n\r\n### Metadata manipulation\r\n\r\nThis methods can be used to manipulate data what was stored in jpeg as `APPn` blocks or located after EOI marker.\r\n\r\n#### f5stego.prototype.getTail()\r\n\r\nReturns `Uint8Array` with data what was found after EOI marker.\r\n\r\n#### f5stego.prototype.setTail(data)\r\n\r\nSets `data` as image tail. If tail data was already presented it will be returned. Otherwise `null` is returned.\r\n\r\n#### f5stego.prototype.clearTail()\r\n\r\nClears image tail data.\r\n\r\n#### f5stego.prototype.getAPPn(id, remove)\r\n\r\nReturns data from `APPn` block `id`. jpeg uses ids from 0xE0 to 0xEF for `APPn` blocks and id 0xFE for comment. If `remove` evaluates to true, then block will be removed from image.\r\n\r\nIf there is no block with provided `id` then `null` will be returned.\r\n\r\n#### f5stego.prototype.setAPPn(id, data)\r\n\r\nSets data as `APPn` block `id`. If such block was already presented in image its value will be returned. Otherwise `null` is returned.\r\n\r\n#### f5stego.prototype.clearAPPs()\r\n\r\nRemoves all `AAPn` blocks from image and returns them. **Note**: JFIF block (with id 0xE0) will not be removed.\r\n\r\n#### f5stego.prototype.strip()\r\n\r\nInternally calls `clearAPPs` and `clearTail`. Always returns `true`.\r\n\r\n### CLI tool\r\n\r\nThis package also contains binary what allows you to embed and extract data from images in command line. This tool is very simple and naive. It can be installed globally with npm by command `npm install f5stegojs --global`.\r\n\r\nTo embed data execute something like\r\n```\r\nf5stego -e -p SecreT cover.jpg message.txt output.jpeg\r\n```\r\n\r\nTo extract\r\n```\r\nf5stego -x -p SecreT cover.jpg output.txt\r\n```\r\n\r\nNot that password is required for both operations. It is used to initialize f5 shuffling.\r\n\r\nContributors\r\n------------\r\n\r\nOriginal f5 algorithm is by Andreas Westfeld. https://code.google.com/p/f5-steganography/\r\n\r\nJavaScript port of f5 algorithm and jpeg codec optimizations by [desudesutalk](https://github.com/desudesutalk).\r\n\r\nCode of this lib is based on [js-steg](https://github.com/owencm/js-steg) by Owen Campbell-Moore. js-steg uses code from:\r\n\r\n * [notmasteryet](https://github.com/notmasteryet/jpgjs) (jpeg decoding)\r\n * Andreas Ritter (jpeg encoding)\r\n\r\nLicense\r\n-------\r\nReleased under MIT. See [LICENSE.txt](LICENSE.txt)",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}